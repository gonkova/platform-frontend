"use client";

import { useAuth } from "@/contexts/AuthContext";
import ProtectedRoute from "@/components/ProtectedRoute";

export default function DashboardPage() {
  const { user, logout } = useAuth();

  if (!user) return null;

  // –†–∞–∑–ª–∏—á–Ω–∏ –±—É—Ç–æ–Ω–∏ —Å–ø–æ—Ä–µ–¥ —Ä–æ–ª—è—Ç–∞
  const getRoleButtons = () => {
    switch (user.role.name) {
      case "owner":
        return (
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <DashboardCard
              title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏"
              description="–î–æ–±–∞–≤—è–Ω–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏"
              icon="üë•"
              color="blue"
            />
            <DashboardCard
              title="Frontend –∑–∞–¥–∞—á–∏"
              description="–ü—Ä–µ–≥–ª–µ–¥ –Ω–∞ –≤—Å–∏—á–∫–∏ frontend –∑–∞–¥–∞—á–∏"
              icon="üé®"
              color="purple"
            />
            <DashboardCard
              title="Backend –∑–∞–¥–∞—á–∏"
              description="–ü—Ä–µ–≥–ª–µ–¥ –Ω–∞ –≤—Å–∏—á–∫–∏ backend –∑–∞–¥–∞—á–∏"
              icon="‚öôÔ∏è"
              color="green"
            />
            <DashboardCard
              title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
              description="–ü—Ä–µ–≥–ª–µ–¥ –Ω–∞ —Ü—è–ª–∞—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
              icon="üìä"
              color="yellow"
            />
            <DashboardCard
              title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
              description="–°–∏—Å—Ç–µ–º–Ω–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
              icon="‚ö°"
              color="red"
            />
            <DashboardCard
              title="–û—Ç—á–µ—Ç–∏"
              description="–ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –æ—Ç—á–µ—Ç–∏"
              icon="üìÑ"
              color="indigo"
            />
          </div>
        );
      case "frontend":
        return (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <DashboardCard
              title="–ú–æ–∏—Ç–µ –∑–∞–¥–∞—á–∏"
              description="–ü—Ä–µ–≥–ª–µ–¥ –Ω–∞ –≤—ä–∑–ª–æ–∂–µ–Ω–∏ frontend –∑–∞–¥–∞—á–∏"
              icon="üìã"
              color="purple"
            />
            <DashboardCard
              title="UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏"
              description="–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Å UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏"
              icon="üé®"
              color="pink"
            />
            <DashboardCard
              title="–î–∏–∑–∞–π–Ω —Å–∏—Å—Ç–µ–º–∞"
              description="–î–æ—Å—Ç—ä–ø –¥–æ –¥–∏–∑–∞–π–Ω —Ñ–∞–π–ª–æ–≤–µ"
              icon="‚ú®"
              color="blue"
            />
            <DashboardCard
              title="–ö–æ–¥ –ø—Ä–µ–≥–ª–µ–¥"
              description="–ß–∞–∫–∞—â–∏ –∫–æ–¥ —Ä–µ–≤—é—Ç–∞"
              icon="üëÄ"
              color="green"
            />
          </div>
        );
      case "backend":
        return (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <DashboardCard
              title="API –∑–∞–¥–∞—á–∏"
              description="–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ API endpoints"
              icon="üîå"
              color="green"
            />
            <DashboardCard
              title="–ë–∞–∑–∞ –¥–∞–Ω–Ω–∏"
              description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏"
              icon="üíæ"
              color="blue"
            />
            <DashboardCard
              title="–°—ä—Ä–≤—ä—Ä–∏"
              description="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞ —Å—ä—Ä–≤—ä—Ä–∏—Ç–µ"
              icon="üñ•Ô∏è"
              color="red"
            />
            <DashboardCard
              title="–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"
              description="API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"
              icon="üìö"
              color="yellow"
            />
          </div>
        );
      default:
        return null;
    }
  };

  return (
    <ProtectedRoute>
      <div className="min-h-screen bg-gray-50">
        {/* Header */}
        <header className="bg-white shadow-sm">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
            <div className="flex justify-between items-center">
              <div>
                <h1 className="text-2xl font-bold text-gray-900">Dashboard</h1>
              </div>
              <div className="flex items-center gap-4">
                <div className="text-right">
                  <p className="text-sm font-medium text-gray-900">
                    {user.name}
                  </p>
                  <p className="text-xs text-gray-500">
                    {user.role.display_name}
                  </p>
                </div>
                <button
                  onClick={logout}
                  className="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition"
                >
                  –ò–∑—Ö–æ–¥
                </button>
              </div>
            </div>
          </div>
        </header>

        {/* Main Content */}
        <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          {/* Welcome Card */}
          <div className="bg-gradient-to-r from-blue-600 to-indigo-600 rounded-2xl shadow-lg p-8 text-white mb-8">
            <h2 className="text-3xl font-bold mb-2">
              –î–æ–±—Ä–µ –¥–æ—à—ä–ª, {user.name}! üëã
            </h2>
            <p className="text-blue-100 text-lg">
              –¢–∏ —Å–∏ —Å —Ä–æ–ª—è:{" "}
              <span className="font-semibold">{user.role.display_name}</span>
            </p>
            <p className="text-blue-100 mt-2">{user.role.description}</p>
          </div>

          {/* Role-based buttons */}
          <div className="mb-8">
            <h3 className="text-xl font-semibold text-gray-900 mb-4">
              –ë—ä—Ä–∑–∏ –¥–µ–π—Å—Ç–≤–∏—è
            </h3>
            {getRoleButtons()}
          </div>
        </main>
      </div>
    </ProtectedRoute>
  );
}

// Dashboard Card Component
function DashboardCard({
  title,
  description,
  icon,
  color,
}: {
  title: string;
  description: string;
  icon: string;
  color: string;
}) {
  const colorClasses = {
    blue: "from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700",
    purple:
      "from-purple-500 to-purple-600 hover:from-purple-600 hover:to-purple-700",
    green:
      "from-green-500 to-green-600 hover:from-green-600 hover:to-green-700",
    yellow:
      "from-yellow-500 to-yellow-600 hover:from-yellow-600 hover:to-yellow-700",
    red: "from-red-500 to-red-600 hover:from-red-600 hover:to-red-700",
    pink: "from-pink-500 to-pink-600 hover:from-pink-600 hover:to-pink-700",
    indigo:
      "from-indigo-500 to-indigo-600 hover:from-indigo-600 hover:to-indigo-700",
  };

  return (
    <button
      className={`bg-gradient-to-br ${
        colorClasses[color as keyof typeof colorClasses]
      } text-white rounded-xl p-6 text-left transition-all duration-200 hover:shadow-lg hover:scale-105`}
    >
      <div className="text-4xl mb-3">{icon}</div>
      <h4 className="font-bold text-lg mb-2">{title}</h4>
      <p className="text-sm text-white/90">{description}</p>
    </button>
  );
}
